# This is a sample configuration bot file
#
# The configuration format is documented at
# https://hackage.haskell.org/package/configurator/docs/Data-Configurator.html

core {
  # A reply for /help command
  HelpReply = "This is a simple bot who echoes all you messages. You may also use commands: \"/help\" and \"/repeat\""

  # A reply for /repeat command. "{count}" placeholder will be
  # substituted with the current echo repetition count.
  RepeatReply = "The current number of repetitions is {count}. Choose a new one"

  # An initial echo repetition count. Note that the user can change it
  # via menu. It must not be negative, otherwise the program will
  # fail.
  EchoRepetitionCount = 2

  # A front-end to run. Available values are:
  #
  # - "console": a simple, single user, terminal front-end using stdin
  #   and stdout. No networking is needed. This is a default.
  #
  # - "telegram": Telegram messenger front-end. The bot operates as a
  #   Telegram bot.
  FrontEnd = "console"
}

log {
  # The minimum level of messages to output. Available values are:
  # debug, info, warning, error. Info is a default.
  Verbosity = "info"

  # The log file path. An empty path means the standard error output,
  # which is also default.
  Path = ""
}

# Telegram front-end configuration
telegram {
  # The API token of your telegram bot. Keep it in secret. The
  # parameter is mandatory.
  # ApiToken = "123456789:ABABABABABABABABABABABABABABABABABABABABA"

  # The server URL prefix. https://api.telegram.org is a default.
  URLPrefix = "https://api.telegram.org"

  # The poll timeout. The telegram server is suggested to wait that
  # much seconds before responding when nothing interesting occurs. 60
  # seconds is a default. Larger values can decrease server load, but
  # they can also increase time to detect connection failure.
  PollTimeout = 600

  # The connection timeout. For poll request it is PollTimeout seconds
  # more. 30 s is a default.
  ConnectionTimeout = 30
}
